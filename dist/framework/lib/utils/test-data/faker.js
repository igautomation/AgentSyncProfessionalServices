/**
 * Simple faker utility for generating test data
 */
class Faker {
  /**
   * Generate a random first name
   * @returns {string} Random first name
   */
  static firstName() {
    const names = ['John', 'Jane', 'Michael', 'Sarah', 'David', 'Emma', 'Robert', 'Lisa', 'William', 'Olivia'];
    return names[Math.floor(Math.random() * names.length)];
  }

  /**
   * Generate a random last name
   * @returns {string} Random last name
   */
  static lastName() {
    const names = ['Smith', 'Johnson', 'Williams', 'Brown', 'Jones', 'Miller', 'Davis', 'Garcia', 'Rodriguez', 'Wilson'];
    return names[Math.floor(Math.random() * names.length)];
  }

  /**
   * Generate a random job title
   * @returns {string} Random job title
   */
  static jobTitle() {
    const titles = ['Manager', 'Developer', 'Designer', 'Analyst', 'Director', 'Engineer', 'Consultant', 'Specialist', 'Coordinator', 'Administrator'];
    return titles[Math.floor(Math.random() * titles.length)];
  }

  /**
   * Generate a random phone number
   * @returns {string} Random phone number
   */
  static phoneNumber() {
    return `555${Math.floor(1000000 + Math.random() * 9000000)}`;
  }

  /**
   * Generate a random department
   * @returns {string} Random department
   */
  static department() {
    const departments = ['Sales', 'Marketing', 'IT', 'HR', 'Finance', 'Operations', 'Customer Support', 'Research', 'Development', 'Legal'];
    return departments[Math.floor(Math.random() * departments.length)];
  }

  /**
   * Generate a random past date
   * @param {number} yearsBack - Maximum years back
   * @returns {Date} Random past date
   */
  static pastDate(yearsBack = 50) {
    const today = new Date();
    const pastDate = new Date();
    pastDate.setFullYear(today.getFullYear() - Math.floor(Math.random() * yearsBack));
    return pastDate;
  }

  /**
   * Generate a random username
   * @returns {string} Random username
   */
  static userName() {
    const usernames = ['user', 'test', 'demo', 'sample', 'customer', 'admin', 'guest', 'member', 'client', 'account'];
    return usernames[Math.floor(Math.random() * usernames.length)];
  }

  /**
   * Generate a random email
   * @returns {string} Random email
   */
  static email() {
    return `${this.userName()}+${Date.now()}@example.com`;
  }

  /**
   * Generate a random street address
   * @returns {string} Random street address
   */
  static streetAddress() {
    const numbers = Math.floor(100 + Math.random() * 9900);
    const streets = ['Main St', 'Oak Ave', 'Maple Rd', 'Park Blvd', 'Cedar Ln', 'Pine St', 'Elm Dr', 'Washington Ave', 'Lake St', 'River Rd'];
    return `${numbers} ${streets[Math.floor(Math.random() * streets.length)]}`;
  }

  /**
   * Generate a random city
   * @returns {string} Random city
   */
  static city() {
    const cities = ['Springfield', 'Riverdale', 'Fairview', 'Kingston', 'Burlington', 'Georgetown', 'Salem', 'Franklin', 'Clinton', 'Madison'];
    return cities[Math.floor(Math.random() * cities.length)];
  }

  /**
   * Generate a random zip code
   * @returns {string} Random zip code
   */
  static zipCode() {
    return `${Math.floor(10000 + Math.random() * 90000)}`;
  }

  /**
   * Generate a random country
   * @returns {string} Random country
   */
  static country() {
    const countries = ['United States', 'Canada', 'United Kingdom', 'Australia', 'Germany', 'France', 'Japan', 'Brazil', 'India', 'Mexico'];
    return countries[Math.floor(Math.random() * countries.length)];
  }

  /**
   * Generate a random sentence
   * @returns {string} Random sentence
   */
  static sentence() {
    const sentences = [
      'This is a test contact created by automation.',
      'Contact created for testing purposes.',
      'Automated test data for Salesforce contact.',
      'This contact was generated by the test framework.',
      'Sample contact for integration testing.'
    ];
    return sentences[Math.floor(Math.random() * sentences.length)];
  }

  /**
   * Generate complete contact data
   * @returns {Object} Contact data object
   */
  static contactData() {
    const birthDate = this.pastDate(40);
    
    return {
      salutation: 'Mr.',
      firstName: this.firstName(),
      lastName: this.lastName(),
      phone: this.phoneNumber(),
      homePhone: this.phoneNumber(),
      mobile: this.phoneNumber(),
      title: this.jobTitle(),
      otherPhone: this.phoneNumber(),
      department: this.department(),
      fax: this.phoneNumber(),
      birthYear: birthDate.getFullYear().toString(),
      email: this.email(),
      leadSource: 'Phone Inquiry',
      mailingStreet: this.streetAddress(),
      mailingCity: this.city(),
      mailingZip: this.zipCode(),
      mailingState: 'IN',
      mailingCountry: this.country(),
      otherStreet: this.streetAddress(),
      otherCity: this.city(),
      otherZip: this.zipCode(),
      otherState: 'IN',
      otherCountry: this.country(),
      languages: 'English',
      level: 'Primary',
      description: this.sentence(),
    };
  }
}

module.exports = Faker;