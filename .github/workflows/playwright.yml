name: Playwright Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Create .env file
        run: |
          cat > .env << 'EOL'
          # Application URLs & API Auth
          API_BASE_URL=https://reqres.in
          API_GRAPHQL_PATH=/graphql
          BASE_URL=https://selectorshub.com/xpath-practice-page
          API_KEY=123456
          OAUTH2_TOKEN=dummy-token
          
          # Login Credentials
          LOGIN_USERNAME=testuser
          LOGIN_PASSWORD=secure123
          TEST_USERNAME=testuser@example.com
          TEST_PASSWORD=password123
          
          # Playwright Runtime Settings
          NODE_ENV=production
          HEADLESS=true
          SLOWMO=0
          
          # CI Runtime Vars
          CI=true
          WORKERS=4
          EOL
      
      - name: Create Dockerfile
        run: |
          cat > Dockerfile << 'EOL'
          # Build stage
          FROM mcr.microsoft.com/playwright:v1.40.0-focal AS builder
          
          WORKDIR /app
          
          # Install build dependencies including make and build-essential
          RUN apt-get update && apt-get install -y \
              pkg-config \
              libcairo2-dev \
              libpango1.0-dev \
              libjpeg-dev \
              libgif-dev \
              librsvg2-dev \
              build-essential \
              make \
              g++ \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
          
          COPY package*.json ./
          RUN npm ci
          
          # Runtime stage
          FROM mcr.microsoft.com/playwright:v1.40.0-focal
          
          WORKDIR /app
          
          # Install runtime dependencies for canvas
          RUN apt-get update && apt-get install -y \
              libcairo2 \
              libpango-1.0-0 \
              libpangocairo-1.0-0 \
              libjpeg8 \
              libgif7 \
              librsvg2-2 \
              && apt-get clean \
              && rm -rf /var/lib/apt/lists/*
          
          # Copy only runtime dependencies
          COPY --from=builder /app/node_modules /app/node_modules
          COPY . .
          
          ENV NODE_ENV=production
          
          CMD ["npm", "test"]
          EOL
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: playwright-framework:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Run API tests with JSON data
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            -v ${{ github.workspace }}/playwright-report:/app/playwright-report \
            --env-file .env \
            playwright-framework:test npx playwright test src/tests/api/rest/data-driven-api.spec.js --project=chromium
      
      - name: Run data-driven tests with CSV data
        if: success() || failure()  # Run even if previous step fails
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            -v ${{ github.workspace }}/playwright-report:/app/playwright-report \
            --env-file .env \
            playwright-framework:test npx playwright test src/tests/ui/data-driven/product-catalog.spec.js --project=chromium
      
      - name: Run visual tests with YAML configuration
        if: success() || failure()  # Run even if previous step fails
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            -v ${{ github.workspace }}/playwright-report:/app/playwright-report \
            --env-file .env \
            playwright-framework:test npx playwright test src/tests/visual/yaml-config-visual.spec.js --project=chromium
      
      - name: Run accessibility tests
        if: success() || failure()  # Run even if previous step fails
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            -v ${{ github.workspace }}/playwright-report:/app/playwright-report \
            --env-file .env \
            playwright-framework:test npx playwright test src/tests/accessibility/accessibilityTest.spec.js --project=chromium
            
      - name: Run XML data tests
        if: success() || failure()  # Run even if previous step fails
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            -v ${{ github.workspace }}/playwright-report:/app/playwright-report \
            --env-file .env \
            playwright-framework:test npx playwright test src/tests/api/xml/xml-validation.spec.js --project=chromium
      
      - name: Generate report
        if: always()
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/test-results:/app/test-results \
            -v ${{ github.workspace }}/playwright-report:/app/playwright-report \
            --env-file .env \
            playwright-framework:test npm run report
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30