/**\n * OrangeHRM Login Page Object\n * Consolidated from multiple implementations\n */\nconst BasePage = require('../BasePage');\nconst { expect } = require('@playwright/test');\n\nclass OrangeHRMLoginPage extends BasePage {\n  /**\n   * Constructor for the OrangeHRMLoginPage class\n   * @param {import('@playwright/test').Page} page - Playwright page object\n   * @throws {Error} If page object is not provided\n   */\n  constructor(page) {\n    if (!page) {\n      throw new Error('Page object is required for OrangeHRMLoginPage');\n    }\n    super(page);\n\n    // Define page URL\n    this.url = 'https://opensource-demo.orangehrmlive.com/web/index.php/auth/login';\n\n    // Define page locators\n    this.locators = {\n      usernameInput: 'input[name=\"username\"]',\n      passwordInput: 'input[name=\"password\"]',\n      loginButton: 'button[type=\"submit\"]',\n      errorMessage: '.oxd-alert-content-text',\n      forgotPasswordLink: '.orangehrm-login-forgot',\n      container: '.orangehrm-login-container',\n      form: 'form'\n    };\n  }\n\n  /**\n   * Navigate to the login page\n   * @returns {Promise<OrangeHRMLoginPage>} This page object for chaining\n   */\n  async navigate() {\n    try {\n      await this.page.goto(this.url);\n      await this.page.waitForLoadState('networkidle');\n      await this.page.waitForSelector(this.locators.usernameInput, {\n        state: 'visible',\n        timeout: 30000\n      });\n      return this;\n    } catch (error) {\n      throw new Error(`Failed to navigate to login page: ${error.message}`);\n    }\n  }\n\n  /**\n   * Enter username\n   * @param {string} username - Username to enter\n   * @returns {Promise<OrangeHRMLoginPage>} This page object for chaining\n   */\n  async enterUsername(username) {\n    await this.fill(this.locators.usernameInput, username);\n    return this;\n  }\n\n  /**\n   * Enter password\n   * @param {string} password - Password to enter\n   * @returns {Promise<OrangeHRMLoginPage>} This page object for chaining\n   */\n  async enterPassword(password) {\n    await this.fill(this.locators.passwordInput, password);\n    return this;\n  }\n\n  /**\n   * Click login button\n   * @returns {Promise<OrangeHRMLoginPage>} This page object for chaining\n   */\n  async clickLoginButton() {\n    await this.click(this.locators.loginButton);\n    return this;\n  }\n\n  /**\n   * Login with username and password\n   * @param {string} username - Username to enter\n   * @param {string} password - Password to enter\n   * @returns {Promise<OrangeHRMLoginPage>} This page object for chaining\n   */\n  async login(username, password) {\n    await this.enterUsername(username);\n    await this.enterPassword(password);\n    await this.clickLoginButton();\n    await this.page.waitForLoadState('networkidle');\n    return this;\n  }\n\n  /**\n   * Verify login success by checking URL redirection to dashboard\n   * @param {number} [timeout=10000] - Timeout in milliseconds\n   * @returns {Promise<boolean>} True if login was successful, false otherwise\n   */\n  async verifyLoginSuccess(timeout = 10000) {\n    try {\n      // Check for dashboard elements\n      const dashboardHeader = this.page.locator('.oxd-topbar-header-breadcrumb');\n      return await dashboardHeader.isVisible({ timeout });\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Get error message text\n   * @returns {Promise<string>} The error message text or empty string if not found\n   */\n  async getErrorMessage() {\n    try {\n      const errorElement = this.page.locator(this.locators.errorMessage);\n      await errorElement.waitFor({ state: 'visible', timeout: 5000 }).catch(() => {});\n      return await errorElement.textContent() || '';\n    } catch (error) {\n      return '';\n    }\n  }\n\n  /**\n   * Check if error message is displayed\n   * @returns {Promise<boolean>} True if error message is visible, false otherwise\n   */\n  async isErrorMessageDisplayed() {\n    try {\n      const errorElement = this.page.locator(this.locators.errorMessage);\n      return await errorElement.isVisible();\n    } catch (error) {\n      return false;\n    }\n  }\n\n  /**\n   * Click forgot password link\n   * @returns {Promise<OrangeHRMLoginPage>} This page object for chaining\n   */\n  async clickForgotPasswordLink() {\n    await this.click(this.locators.forgotPasswordLink);\n    return this;\n  }\n\n  /**\n   * Check if login page is displayed\n   * @returns {Promise<boolean>} True if login page is displayed, false otherwise\n   */\n  async isLoginPageDisplayed() {\n    return await this.isVisible(this.locators.container);\n  }\n}\n\nmodule.exports = OrangeHRMLoginPage;